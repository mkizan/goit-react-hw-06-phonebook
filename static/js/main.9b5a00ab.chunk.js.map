{"version":3,"sources":["components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","style.module.scss","components/Container/Container.module.scss","redux/contact/contact-actions.js","redux/contact/contact-reducer.js","redux/store.js","components/Container/Container.jsx","redux/contact/contact-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.jsx","index.js","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","addContact","createAction","text","number","payload","id","nanoid","name","phone","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","Container","children","className","styles","getContacts","getFilter","getFilteredContacts","normalizedFilter","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","useState","stateName","setStateName","stateNumber","setStateNumber","form","onSubmit","event","preventDefault","find","contact","alert","label","type","input","pattern","value","onChange","target","title","placeholder","autoComplete","required","btn","Filter","e","ContactList","list","map","list__item","onClick","onDeleteContacts","App","title__phonebook","title__contacts","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9b5a00ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3wSXY\",\"list__item\":\"ContactList_list__item__29IJl\",\"btn\":\"ContactList_btn__LjK5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2pNgv\",\"input\":\"Filter_input__YmgBH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title__phonebook\":\"style_title__phonebook__3aFT2\",\"title__contacts\":\"style_title__contacts__2HUDu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__11SY1\"};","import { createAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n// import types from './contact-types';\n\nexport const addContact = createAction('contact/add', (text, number) => {\n  return {\n    payload: {\n      id: nanoid(),\n      name: text,\n      phone: number,\n    },\n  };\n});\n\nexport const deleteContact = createAction('contact/delete');\n\nexport const changeFilter = createAction('contact/changeFilter');\n\n// export const addContact = (text, number) => ({\n//   type: types.ADD,\n//   payload: {\n//     // id: shortid.generate(),\n//     id: nanoid(),\n//     name: text,\n//     phone: number,\n//   },\n// });\n\n// export const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// export const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import types from './contact-types';\nimport * as actions from './contact-actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case actions.changeFilter:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactReducer from './contact/contact-reducer';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","import styles from './Container.module.scss';\n\nconst Container = ({ children }) => {\n  return <div className={styles.Container}>{children}</div>;\n};\n\nexport default Container;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getContacts } from '../../redux/contact/contact-selectors';\nimport { addContact } from '../../redux/contact/contact-actions';\nimport styles from './ContactForm.module.scss';\n\nfunction ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const [stateName, setStateName] = useState('');\n  const [stateNumber, setStateNumber] = useState('');\n\n  const handleInputChangeName = event => {\n    setStateName(event.target.value);\n  };\n\n  const handleInputChangeNumber = event => {\n    setStateNumber(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === stateName.toLowerCase(),\n      )\n    ) {\n      return alert(`${stateName} is already in contacts`);\n    }\n\n    dispatch(addContact(stateName, stateNumber));\n    setStateName('');\n    setStateNumber('');\n  };\n\n  ContactForm.propTypes = {\n    stateName: PropTypes.string.isRequired,\n    stateNumber: PropTypes.string.isRequired,\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label}>\n        Name\n        <input\n          type=\"text\"\n          className={styles.input}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          value={stateName}\n          onChange={handleInputChangeName}\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          placeholder=\"Enter your name\"\n          autoComplete=\"off\"\n          required\n        />\n      </label>\n      <label className={styles.label}>\n        Number\n        <input\n          type=\"tel\"\n          className={styles.input}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          value={stateNumber}\n          onChange={handleInputChangeNumber}\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          placeholder=\"Enter your phone number\"\n          autoComplete=\"on\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={styles.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contact/contact-selectors';\nimport { changeFilter } from '../../redux/contact/contact-actions';\nimport styles from './Filter.module.scss';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <label className={styles.label}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        className={styles.input}\n        value={value}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n        placeholder=\"Find your contact\"\n        autoComplete=\"off\"\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/contact/contact-selectors';\nimport { deleteContact } from '../../redux/contact/contact-actions';\nimport styles from './ContactList.module.scss';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContacts = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ name, phone, id }) => {\n        return (\n          <li className={styles.list__item} key={id}>\n            {name}: {phone}\n            <button\n              type=\"button\"\n              className={styles.btn}\n              onClick={() => onDeleteContacts(id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport styles from './style.module.scss';\n\nexport default function App() {\n  return (\n    <Container>\n      <h1 className={styles.title__phonebook}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={styles.title__contacts}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1NiH1\",\"label\":\"ContactForm_label__3KgVy\",\"input\":\"ContactForm_input__3emgF\",\"btn\":\"ContactForm_btn__1BmbG\"};"],"sourceRoot":""}